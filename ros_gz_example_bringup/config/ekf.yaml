# ekf.yaml
# 이 파일은 두 개의 EKF(확장 칼만 필터) 노드와 navsat_transform 노드에 대한 설정을 담고 있습니다.
# 각 노드는 이 파일을 불러와 자신의 이름(예: ekf_local)에 해당하는 파라미터만 읽어갑니다.

# ----------------------------------------------------------------------------------- #
#                              ekf_local: 지역 EKF 설정                               #
# ----------------------------------------------------------------------------------- #
# 목적: IMU 센서 데이터만을 사용하여 부드러운 단기 주행 경로(odometry)를 생성합니다.
# 특징: 시간이 지남에 따라 실제 위치와의 오차가 누적(drift)되지만, 단기적인 움직임은 매우 매끄럽습니다.
ekf_local:
  ros__parameters:
    # --- 기본 동작 설정 ---
    frequency: 100.0               # 필터가 1초에 몇 번 상태를 업데이트할지 결정합니다. (Hz)
    sensor_timeout: 0.5           # 센서 데이터가 이 시간(초) 동안 들어오지 않으면 타임아웃으로 간주합니다.
    two_d_mode: false             # 2D 모드. true로 하면 Z축 위치, roll/pitch 각도 및 관련 속도/가속도를 모두 0으로 고정합니다.

    # --- 좌표 프레임(Coordinate Frames) 설정 ---
    # EKF는 여러 좌표계 간의 관계(TF)를 계산하여 로봇의 위치를 추정합니다.
    map_frame: map                # 지도처럼 월드에 고정된 절대 좌표계. 로컬 EKF에서는 사용되지 않습니다.
    odom_frame: odom              # 주행 시작점을 기준으로 오차가 누적되는 부동 좌표계.
    base_link_frame: chassis_link # 로봇 자체의 기준이 되는 프레임. 보통 로봇의 중심입니다.
    world_frame: odom             # 이 필터가 최종적으로 계산할 변환은 'odom' -> 'chassis_link' 입니다.

    # --- 센서 입력 설정 (IMU) ---
    imu0: imu                # 사용할 첫 번째 IMU 데이터가 발행되는 토픽 이름입니다.

    # imu0_config: IMU 메시지의 어떤 값을 필터에 사용할지 결정하는 15개의 논리값 배열입니다.
    # 순서: [X, Y, Z, Roll, Pitch, Yaw, Vx, Vy, Vz, Vroll, Vpitch, Vyaw, Ax, Ay, Az]
    imu0_config: [false, false, false,  # 위치(X,Y,Z)는 IMU에서 직접 얻을 수 없으므로 false
                  true,  true,  true,   # 자세(Roll,Pitch,Yaw)는 IMU의 핵심 정보이므로 true
                  false, false, false,  # 선속도(Vx,Vy,Vz)는 신뢰도가 낮아 보통 사용 안 함. false
                  true,  true,  true,   # 각속도(Vroll,Vpitch,Vyaw)는 매우 중요한 정보이므로 true
                  true,  true,  true]   # 가속도(Ax,Ay,Az)는 움직임을 예측하는 데 사용되므로 true

    imu0_differential: false      # 차분 모드. true로 하면 현재 측정값에서 이전 측정값을 뺀 차이값을 사용합니다.
    imu0_relative: false          # 상대 측정 모드. true로 하면 첫 측정값을 기준으로 한 상대값을 사용합니다.
    imu0_remove_gravitational_acceleration: true # IMU의 가속도 센서 값에서 중력 가속도(9.8m/s^2) 성분을 제거합니다. 순수한 움직임에 의한 가속도만 사용하기 위해 필수적입니다.

    # --- 공분산 행렬 (Covariance Matrices) ---
    # 칼만 필터의 성능을 좌우하는 가장 중요한 튜닝 파라미터입니다.
    # '불확실성'을 의미하며, 값이 작을수록 해당 변수를 더 신뢰한다는 의미입니다.
    
    # process_noise_covariance: 로봇 모델의 불확실성. 시간이 지남에 따라 상태가 얼마나 불확실해지는지를 나타냅니다.
    # 값이 클수록 측정값을 더 신뢰하고, 작을수록 이전 상태 예측을 더 신뢰하게 됩니다.
    process_noise_covariance: [0.1, 0.1, 0.1, 
                               0.1, 0.1, 0.05, 
                               1.0, 1.0, 1.0, 
                               0.5, 0.5, 0.5, 
                               5.0, 5.0, 5.0]

    initial_estimate_covariance: [1.0, 1.0, 1.0, 
                                  1e-3, 1e-3, 1e-3, 
                                  1.0, 1.0, 1.0, 
                                  1e-3, 1e-3, 1e-3, 
                                  1.0, 1.0, 1.0]

# ----------------------------------------------------------------------------------- #
#                             ekf_global: 전역 EKF 설정                               #
# ----------------------------------------------------------------------------------- #
# 목적: GPS와 IMU 데이터를 융합하여 오차 누적이 없는 절대적인 위치(map -> odom)를 추정합니다.
# 특징: GPS 신호가 튈 때 약간씩 흔들릴 수 있지만, 장기적으로 정확한 위치를 유지하여 로컬 EKF의 오차 누적을 보정해줍니다.
ekf_global:
  ros__parameters:
    frequency: 100.0
    sensor_timeout: 0.5
    two_d_mode: false

    # --- 좌표 프레임 설정 ---
    map_frame: map                
    odom_frame: odom
    base_link_frame: chassis_link
    world_frame: map              # 이 필터의 월드 프레임은 'map'. 즉, map -> odom 변환을 최종적으로 계산합니다.

    # # --- 센서 입력 설정 (GPS Odometry + IMU) ---
    # # odom0: navsat_transform_node가 GPS 데이터를 변환해준 'odometry/gps' 토픽을 사용합니다.
    # odom0: odometry/gps
    
    # # odom0_config: GPS에서는 절대적인 X, Y 위치 정보만 사용합니다.
    # #        [x_pos   , y_pos    , z_pos,
    # #         roll    , pitch    , yaw,
    # #         x_vel   , y_vel    , z_vel,
    # #         roll_vel, pitch_vel, yaw_vel,
    # #         x_accel , y_accel  , z_accel]
    # odom0_config: [true,  true,  false,
    #                false, false, false,
    #                false, false, false,
    #                false, false, false,
    #                false, false, false]

    # --- 센서 입력 설정 (Pose + IMU) ---
    # pose0: PoseWithCovarianceStamped 메시지를 사용하는 경우 'poseX' 파라미터를 사용합니다.
    #        여기에 실제 사용하는 토픽 이름을 입력하세요. (예: /gps/pose)
    pose0: /abs_xy
    
    # pose0_config: Pose 데이터에서는 절대적인 X, Y 위치 정보만 사용합니다.
    # Pose 메시지에는 속도나 가속도 정보가 없으므로 해당 필드는 모두 false로 설정해야 합니다.
    #        [x_pos   , y_pos    , z_pos,
    #         roll    , pitch    , yaw,
    #         x_vel   , y_vel    , z_vel,
    #         roll_vel, pitch_vel, yaw_vel,
    #         x_accel , y_accel  , z_accel]
    pose0_config: [true,  true,  false,
                   false, false, false,
                   false, false, false,
                   false, false, false,
                   false, false, false]
    
    # imu0: 로컬 EKF와 동일하게 IMU의 자세, 각속도, 가속도 정보를 사용합니다.
    imu0: imu
    imu0_config: [false, false, false,
                  true,  true,  true,
                  false, false, false,
                  true,  true,  true,
                  true,  true,  true]
    imu0_remove_gravitational_acceleration: true

    # --- 공분산 행렬 ---
    # process_noise_covariance: 글로벌 필터는 GPS의 위치 노이즈가 클 수 있으므로,
    # 위치(X, Y)에 대한 공분산을 로컬 EKF보다 더 크게 설정하여 측정값의 불확실성을 반영합니다.
    process_noise_covariance: [0.1, 0.1, 0.1, 
                               0.1, 0.1, 0.05, 
                               1.0, 1.0, 1.0, 
                               0.5, 0.5, 0.5, 
                               5.0, 5.0, 5.0]

    initial_estimate_covariance: [1.0, 1.0, 1.0, 
                                  1e-3, 1e-3, 1e-3, 
                                  1.0, 1.0, 1.0, 
                                  1e-3, 1e-3, 1e-3, 
                                  1.0, 1.0, 1.0]

# ----------------------------------------------------------------------------------- #
#                         navsat_transform: GPS 변환 노드 설정                         #
# ----------------------------------------------------------------------------------- #
# 목적: GPS 센서의 위도(latitude), 경도(longitude) 데이터를 EKF가 사용할 수 있는
#       데카르트 좌표계(x, y 미터 단위)의 Odometry 메시지로 변환합니다.
navsat_transform:
  ros__parameters:
    frequency: 15.0
    delay: 3.0                    # 시스템 시작 후 초기 위치가 안정될 때까지 3초간 변환을 지연시킵니다.
    magnetic_declination_radians: 0.0 # 자기 편각. 해당 지역의 자북과 진북의 차이. 정확한 IMU 헤딩을 위해 설정이 필요할 수 있습니다.
    yaw_offset: 0.0               # IMU 센서의 0도 방향과 지도상의 북쪽을 일치시키기 위한 보정값(라디안)입니다.
    zero_altitude: false          # 고도를 강제로 0으로 설정할지 여부입니다.
    use_utm: false                # [매우 중요] true면 표준 UTM 좌표계, false면 시뮬레이션 시작 위치를 원점(0,0)으로 하는 지역 ENU(East-North-Up) 좌표계를 사용합니다. 시뮬레이션에서는 보통 false를 사용합니다.
    broadcast_utm_transform: false # UTM 좌표계 변환을 TF로 발행할지 여부입니다.
    publish_filtered_gps: true     # 변환된 위치 정보를 `odometry/gps` 토픽으로 발행합니다.
    use_odometry_yaw: false       # true면 EKF의 yaw를, false면 IMU의 yaw를 직접 사용하여 GPS 데이터를 변환합니다. IMU의 yaw가 더 안정적인 경우가 많아 false로 설정합니다.
    
    # wait_for_datum: true로 설정하면, 아래 datum 파라미터가 주어지기 전까지 변환을 시작하지 않습니다.
    # 이를 통해 Gazebo 월드에 설정된 위/경도와 GPS의 기준점을 정확히 일치시킬 수 있습니다.
    wait_for_datum: true
    # datum: GPS의 기준점이 될 실제 위도, 경도, 고도입니다. Gazebo 월드 파일의 <spherical_coordinates> 태그와 일치시켜야 합니다.
    datum: [37.0, 127.0, 0.0]
    
    # transform_timeout: TF 정보를 요청했을 때, 바로 응답이 없더라도 이 시간(초)만큼 더 기다립니다.
    # 일시적인 통신 지연으로 `Could not obtain transform` 에러가 발생하는 것을 방지하여 안정성을 높입니다.
    transform_timeout: 0.1